{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["Header","Layout","App","onStatusChange","bind","onAGIChange","onQCChange","calculatePayment","state","qc","e","this","setState","status","target","value","agi","className","style","color","span","checked","onChange","width","formatter","replace","showEmoji","reduction","cap","mult","Math","max","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.5cbd1ae1.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Col, InputNumber, Layout, Radio, Row} from \"antd\";\n\nconst { Header } = Layout;\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.onStatusChange = this.onStatusChange.bind(this);\n    this.onAGIChange = this.onAGIChange.bind(this);\n    this.onQCChange = this.onQCChange.bind(this);\n    this.calculatePayment = this.calculatePayment.bind(this);\n    this.state = { qc: 0 };\n  }\n\n  onStatusChange(e) {\n    this.setState({\n      status: e.target.value\n    })\n  }\n\n  onAGIChange(e) {\n    this.setState({\n      agi: e\n    })\n  }\n\n  onQCChange(e) {\n    this.setState({\n      qc: e\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Layout>\n          <Header>\n            <h1 style={{color: 'whitesmoke'}}>COVID-19 Stimulus Payment Calculator</h1>\n          </Header>\n          <Row>\n            <Col span={8}></Col>\n            <Col span={8}>\n              <h4>2019 (or 2018 if you haven't filed 2019 yet) Tax Filing Status</h4>\n              <Radio checked={this.state.status === 'single'} onChange={this.onStatusChange} value={'single'}>Single</Radio><br/>\n              <Radio checked={this.state.status === 'married'} onChange={this.onStatusChange} value={'married'}>Married Filing Jointly</Radio><br/>\n              <Radio checked={this.state.status === 'hoh'} onChange={this.onStatusChange} value={'hoh'}>Head of Household</Radio><br/>\n            </Col>\n            <Col span={8}></Col>\n          </Row>\n          <Row>\n            <Col span={8}></Col>\n            <Col span={8}>\n              <h4>2019 (or 2018) Adjusted Gross Income (Line 8b on IRS Form 1040)</h4>\n              <InputNumber\n                onChange={this.onAGIChange}\n                style={{width: '33%'}}\n                formatter={value => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n              ></InputNumber>\n            </Col>\n            <Col span={8}></Col>\n          </Row>\n          <Row>\n            <Col span={8}></Col>\n            <Col span={8}>\n              <h4>How many qualifying children under 17 did you claim?</h4>\n              <InputNumber\n                style={{width: '33%'}}\n                onChange={this.onQCChange}\n              ></InputNumber>\n            </Col>\n            <Col span={8}></Col>\n          </Row>\n          <Row>\n            <Col span={8}></Col>\n            <Col span={8}>\n              <h4>Estimated Stimulus Payment:</h4>\n              <h1>${this.calculatePayment()} {this.showEmoji()}</h1>\n            </Col>\n            <Col span={8}></Col>\n          </Row>\n        </Layout>\n      </div>\n    );\n  }\n\n  calculatePayment() {\n    const reduction = (cap, mult = 1) => (Math.max(this.state.agi - cap, 0) / 100) * 5 * mult;\n    const { status, agi, qc} = this.state;\n    if (!(status && agi)) {\n      return;\n    }\n    switch (this.state.status) {\n      case 'single':\n        return Math.max(1200 - (reduction(75000)), 0) + (qc * 500);\n      case 'married':\n        return Math.max(2400 - (reduction(150000)), 0) + (qc * 500);\n      case 'hoh':\n        return Math.max(1200 - (reduction(112500)), 0) + (qc * 500);\n    }\n  }\n\n  showEmoji() {\n    if (this.calculatePayment() === '0') {\n      return 'ðŸ¤¬'\n    }\n    if (this.calculatePayment() > 0) {\n      return 'ðŸ’°';\n    }\n    return '';\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}